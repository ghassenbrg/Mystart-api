{
  "swagger": "2.0",
  "info": {
    "description": "This is our project server   ",
    "version": "1.0.0",
    "title": "Swagger project",
    "termsOfService": "http://swagger.io/terms/",
    "contact": {
      "email": "apiteam@swagger.io"
    },
    "license": {
      "name": "Apache 2.0",
      "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
    }
  },
  "host": "localhost",
  "basePath": ":3000/",
  "tags": [
    {
      "name": "user",
      "description": "Everything about your users",
      "externalDocs": {
        "description": "Find out more",
        "url": "http://localhost:3000/"
      }
    },
    {
      "name": "service",
      "description": "Access to services"
    }
  
  ],
  "schemes": [
    "http"
  ],
  "paths": {
    "/project": {
      "post": {
        "tags": [
          "project"
        ],
        "summary": "Create project",
        "description": "",
        "operationId": "create project ",
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Created project object",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Project"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        }
      },
      "get": {
        "tags": [
          "project"
        ],
        "summary": "fetch all projects",
        "description": "This can done by all users.",
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/User"
            }
          },
          
          "500": {
            "description": "error"
          }
        }
      }
    
      
    },

    "/project/projectId": {
      "get": {
        "tags": [
          "project"
        ],
        "summary": "Get project by id",
        "description": "",
        "operationId": "getProjectById",
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "description": "The id of project that need to be fetched. ",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/Project"
            }
          },
          "400": {
            "description": "Invalid id supplied"
          },
          "500": {
            "description": "Project not found"
          }
        }
      },
      "put": {
        "tags": [
          "project"
        ],
        "summary": "Updated project",
        "description": "This can only be done by the project creator.",
        "operationId": "updateUser",
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "projectid",
            "in": "path",
            "description": "the id of project that need to be updated",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Updated project object",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Project"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid project supplied"
          },
          "404": {
            "description": "id not found"
          }
        }
      },
      "delete": {
        "tags": [
          "project"
        ],
        "summary": "Delete project",
        "description": "This can only be done by the project creator.",
        "operationId": "deleteProject",
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "id of project that needs to be deleted",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid id supplied"
          },
          "404": {
            "description": "Project not found"
          }
        }
      }
    },
    
    "/lesson": {
      "post": {
        "tags": [
          "lesson"
        ],
        "summary": "Create lesson",
        "description": "",
        "operationId": "lesson",
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Created lesson object",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Lesson"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        }
      },
      "get": {
        "tags": [
          "lesson"
        ],
        "summary": "fetch all lesson",
        "description": "This can done by all users.",
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/Lesson"
            }
          },
          
          "500": {
            "description": "error"
          }
        }
      }
    
      
    },

    "/lesson/:id": {
      "get": {
        "tags": [
          "lesson"
        ],
        "summary": "Get lesson by id",
        "description": "",
        "operationId": "getLessonById",
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "lessonid",
            "in": "path",
            "description": "The id of lesson that need to be fetched. ",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/Lesson"
            }
          },
          "400": {
            "description": "Invalid id supplied"
          },
          "500": {
            "description": "Lesson not found"
          }
        }
      },
      "put": {
        "tags": [
          "lesson"
        ],
        "summary": "Updated lesson",
        "description": "This can only be done by the lesson creator.",
        "operationId": "updateLesson",
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "lessonid",
            "in": "path",
            "description": "the id of lesson that need to be updated",
            "required": true,
            "type": "integer"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Updated lesson object",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Lesson"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid lesson supplied"
          },
          "404": {
            "description": "id not found"
          }
        }
      },
      "delete": {
        "tags": [
          "lesson"
        ],
        "summary": "Delete lesson",
        "description": "This can only be done by the lesson creator.",
        "operationId": "deleteLesson",
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "id of lesson that needs to be deleted",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid id supplied"
          },
          "404": {
            "description": "Lesson not found"
          }
        }
      }
    },
    
    "/qeustion": {
      "post": {
        "tags": [
          "question"
        ],
        "summary": "Create question",
        "description": "",
        "operationId": "questionid",
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Created question object",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Question"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        }
      }
      
    
      
    },

    "/question/{'id'}": {
      "get": {
        "tags": [
          "question"
        ],
        "summary": "Get question by id",
        "description": "",
        "operationId": "getQuestionById",
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "questionid",
            "in": "path",
            "description": "The id of question that need to be fetched. ",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/question"
            }
          },
          "400": {
            "description": "Invalid id supplied"
          },
          "500": {
            "description": "question not found"
          }
        }
      },
      "put": {
        "tags": [
          "question"
        ],
        "summary": "Update a question",
        "description": "This can only be done by the question creator.",
        "operationId": "updateQuestion",
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "questionid",
            "in": "path",
            "description": "the id of question that need to be updated",
            "required": true,
            "type": "integer"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Updated question object",
            "required": true,
            "schema": {
              "$ref": "#/definitions/question"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid question supplied"
          },
          "404": {
            "description": "id not found"
          }
        }
      },
      "delete": {
        "tags": [
          "question"
        ],
        "summary": "Delete question",
        "description": "This can only be done by the question creator.",
        "operationId": "deletequestion",
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "id of question that needs to be deleted",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid id supplied"
          },
          "404": {
            "description": "Question not found"
          }
        }
      }
    },


    "/service": {
      "post": {
        "tags": [
          "service"
        ],
        "summary": "Create service",
        "description": "",
        "operationId": "create service ",
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Created service object",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Service"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        }
      },
      "get": {
        "tags": [
          "service"
        ],
        "summary": "fetch all services",
        "description": "This can done by all users.",
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/User"
            }
          },
          
          "500": {
            "description": "error"
          }
        }
      }
    
      
    },

    
    "/services/:id": {
      "get": {
        "tags": [
          "service"
        ],
        "summary": "Find a purchase  ",
        "description": "",
        "operationId": "getserviceById",
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "serviceId",
            "in": "path",
            "description": "ID of service that needs to be fetched",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/Service"
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Service not found"
          }
        }
      },
      "put": {
        "tags": [
          "service"
        ],
        "summary": "Updated service",
        "description": "This can only be done by the service creator.",
        "operationId": "updateService",
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "serviceid",
            "in": "path",
            "description": "the id of service that need to be updated",
            "required": true,
            "type": "integer"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Updated service object",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Service"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid service supplied"
          },
          "404": {
            "description": "id not found"
          }
        }
      },
      "delete": {
        "tags": [
          "service"
        ],
        "summary": "Delete a service ",
        "description": "",
        "operationId": "deleteService",
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "serviceId",
            "in": "path",
            "description": "ID of the service that needs to be deleted",
            "required": true,
            "type": "integer",
            "minimum": 1,
            "format": "int64"
          }
        ],
        "responses": {
          "404": {
            "description": "Invalid ID supplied"
          },
          "500": {
            "description": "Service not found"
          }
        }
      }
    },

    "/users": {
      "get": {
        "tags": [
          "user"
        ],
        "summary": "fetch all user",
        "description": "This can only be done by the admin.",
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/User"
            }
          },
          
          "500": {
            "description": "error"
          }
        }
      },
    
      "post": {
        "tags": [
          "user"
        ],
        "summary": "Create user",
        "description": "",
        "operationId": "createUser",
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Created user object",
            "required": true,
            "schema": {
              "$ref": "#/definitions/User"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        }
      }
      
      
    },
  
    "/user/login": {
      "get": {
        "tags": [
          "user"
        ],
        "summary": "Logs user into the system",
        "description": "",
        "operationId": "loginUser",
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "username",
            "in": "query",
            "description": "The user name for login",
            "required": true,
            "type": "string"
          },
          {
            "name": "password",
            "in": "query",
            "description": "The password for login in clear text",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "string"
            },
            "headers": {
              "X-Rate-Limit": {
                "type": "integer",
                "format": "int32",
                "description": ""
              },
              "X-Expires-After": {
                "type": "string",
                "format": "date-time",
                "description": ""
              }
            }
          },
          "400": {
            "description": "Invalid username/password supplied"
          }
        }
      }
    },
    "/user/logout": {
      "get": {
        "tags": [
          "user"
        ],
        "summary": "Logs out current logged in user session",
        "description": "",
        "operationId": "logoutUser",
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        }
      }
    },
    "/user/:id": {
      "get": {
        "tags": [
          "user"
        ],
        "summary": "Get user by id",
        "description": "",
        "operationId": "getUserById",
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "userid",
            "in": "path",
            "description": "The id of user that need to be fetched. ",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/User"
            }
          },
          "400": {
            "description": "Invalid id supplied"
          },
          "500": {
            "description": "User not found"
          }
        }
      },
      "put": {
        "tags": [
          "user"
        ],
        "summary": "Updated user",
        "description": "This can only be done by the logged in user.",
        "operationId": "updateUser",
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "userid",
            "in": "path",
            "description": "the id of userthat need to be updated",
            "required": true,
            "type": "integer"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Updated user object",
            "required": true,
            "schema": {
              "$ref": "#/definitions/User"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid user supplied"
          },
          "404": {
            "description": "id not found"
          }
        }
      },
      "delete": {
        "tags": [
          "user"
        ],
        "summary": "Delete user",
        "description": "This can only be done by the admin.",
        "operationId": "deleteUser",
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "id that needs to be deleted",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid id supplied"
          },
          "404": {
            "description": "User not found"
          }
        }
      }
    }
    },
  
  "securityDefinitions": {
    "app_auth": {
      "type": "oauth2",
      "authorizationUrl": "http://project.swagger.io/oauth/dialog",
      "flow": "implicit",
      "scopes": {
        "write:users": "modify users ",
        "read:users": "read your users"
      }
    }
  
  },
  "definitions": {
    "Project": {
      "type": "object",
      "properties": {
       
        "title": {
          "type": "string"
        },
       
        "description": {
          "type": "string"
         
        },
        "coverimg": {
          "type": "string"
        },
        "categorie": {
          "type": "string"
        }
      },
      "xml": {
        "name": "Project"
      }
    },
    "Question": {
      "type": "object",
      "properties": {
        "questionid": {
          "type": "integer",
          "format": "int64"
        },
        "userid": {
          "type": "integer",

          "format": "int64"
        },
       
        "content": {
          "type": "string"
         
        }
       
      },
      "xml": {
        "name": "Question"
      }
    },
    "Service": {
      "type": "object",
      "properties": {
      
        "userId": {
          "type": "integer",
          "format": "int64"
        },
       
        "price": {
          "type": "integer",
          "format": "int32"
        },
        "serviceStatus": {
          "type": "string",
          "description": "Service Status"
        }
     
      },
      "xml": {
        "name": "Service"
      }
    },
    "User": {
      "type": "object",
      "properties": {
      
        "username": {
          "type": "string"
        },
        "password": {
          "type": "string"
        },
        "firstName": {
          "type": "string"
        },
        "lastName": {
          "type": "string"
        },
        "email": {
          "type": "string"
        },
      
        "phone": {
          "type": "integer",
          "format": "int64"
        },
        "country": {
          "type": "string"
        },
        "city": {
          "type": "string"
        },
        "profilepic": {
          "type": "string"
        },
        "description":{
          "type":"string"},
    "cvurl":{
      "type":"string"},
    "sexe": {
      "type":"string"},
    "dateofb":{
      "type":"string"},
    
    "isadmin":{
      "type": "boolean",
      "default": false},
      "skills":{ 
        "type":"string" },
       "expert":{ 
         "netincome":{"type": "integer",
          "format": "int64"},
        "withdrawn":{ 
          "type":"string" },
        "availableforwithdrawal":{ 
          "skills":"string" }
        }
    },
      
      "xml": {
        "name": "User"
      }
    },
   
    
    "ApiResponse": {
      "type": "object",
      "properties": {
        "code": {
          "type": "integer",
          "format": "int32"
        },
        "type": {
          "type": "string"
        },
        "message": {
          "type": "string"
        }
      }
    }
  },
  "externalDocs": {
    "description": "Find out more about Swagger",
    "url": "http://swagger.io"
  }
}
